#include "core/wrapper/wifi.h"

const char * ToString(wifi_err_reason_t reason)
{
	switch (reason) {
	case WIFI_REASON_UNSPECIFIED:
		return "UNSPECIFIED";
	case WIFI_REASON_AUTH_EXPIRE:
		return "AUTH_EXPIRE";
	case WIFI_REASON_AUTH_LEAVE:
		return "AUTH_LEAVE";
	case WIFI_REASON_ASSOC_EXPIRE:
		return "ASSOC_EXPIRE";
	case WIFI_REASON_ASSOC_TOOMANY:
		return "ASSOC_TOOMANY";
	case WIFI_REASON_NOT_AUTHED:
		return "NOT_AUTHED";
	case WIFI_REASON_NOT_ASSOCED:
		return "NOT_ASSOCED";
	case WIFI_REASON_ASSOC_LEAVE:
		return "ASSOC_LEAVE";
	case WIFI_REASON_ASSOC_NOT_AUTHED:
		return "ASSOC_NOT_AUTHED";
	case WIFI_REASON_DISASSOC_PWRCAP_BAD:
		return "DISASSOC_PWRCAP_BAD";
	case WIFI_REASON_DISASSOC_SUPCHAN_BAD:
		return "DISASSOC_SUPCHAN_BAD";
	case WIFI_REASON_BSS_TRANSITION_DISASSOC:
		return "BSS_TRANSITION_DISASSOC";
	case WIFI_REASON_IE_INVALID:
		return "IE_INVALID";
	case WIFI_REASON_MIC_FAILURE:
		return "MIC_FAILURE";
	case WIFI_REASON_4WAY_HANDSHAKE_TIMEOUT:
		return "4WAY_HANDSHAKE_TIMEOUT";
	case WIFI_REASON_GROUP_KEY_UPDATE_TIMEOUT:
		return "GROUP_KEY_UPDATE_TIMEOUT";
	case WIFI_REASON_IE_IN_4WAY_DIFFERS:
		return "IE_IN_4WAY_DIFFERS";
	case WIFI_REASON_GROUP_CIPHER_INVALID:
		return "GROUP_CIPHER_INVALID";
	case WIFI_REASON_PAIRWISE_CIPHER_INVALID:
		return "PAIRWISE_CIPHER_INVALID";
	case WIFI_REASON_AKMP_INVALID:
		return "AKMP_INVALID";
	case WIFI_REASON_UNSUPP_RSN_IE_VERSION:
		return "UNSUPP_RSN_IE_VERSION";
	case WIFI_REASON_INVALID_RSN_IE_CAP:
		return "INVALID_RSN_IE_CAP";
	case WIFI_REASON_802_1X_AUTH_FAILED:
		return "802_1X_AUTH_FAILED";
	case WIFI_REASON_CIPHER_SUITE_REJECTED:
		return "CIPHER_SUITE_REJECTED";
	case WIFI_REASON_TDLS_PEER_UNREACHABLE:
		return "TDLS_PEER_UNREACHABLE";
	case WIFI_REASON_TDLS_UNSPECIFIED:
		return "TDLS_UNSPECIFIED";
	case WIFI_REASON_SSP_REQUESTED_DISASSOC:
		return "SSP_REQUESTED_DISASSOC";
	case WIFI_REASON_NO_SSP_ROAMING_AGREEMENT:
		return "NO_SSP_ROAMING_AGREEMENT";
	case WIFI_REASON_BAD_CIPHER_OR_AKM:
		return "BAD_CIPHER_OR_AKM";
	case WIFI_REASON_NOT_AUTHORIZED_THIS_LOCATION:
		return "NOT_AUTHORIZED_THIS_LOCATION";
	case WIFI_REASON_SERVICE_CHANGE_PERCLUDES_TS:
		return "SERVICE_CHANGE_PERCLUDES_TS";
	case WIFI_REASON_UNSPECIFIED_QOS:
		return "UNSPECIFIED_QOS";
	case WIFI_REASON_NOT_ENOUGH_BANDWIDTH:
		return "NOT_ENOUGH_BANDWIDTH";
	case WIFI_REASON_MISSING_ACKS:
		return "MISSING_ACKS";
	case WIFI_REASON_EXCEEDED_TXOP:
		return "EXCEEDED_TXOP";
	case WIFI_REASON_STA_LEAVING:
		return "STA_LEAVING";
	case WIFI_REASON_END_BA:
		return "END_BA";
	case WIFI_REASON_UNKNOWN_BA:
		return "UNKNOWN_BA";
	case WIFI_REASON_TIMEOUT:
		return "TIMEOUT";
	case WIFI_REASON_PEER_INITIATED:
		return "PEER_INITIATED";
	case WIFI_REASON_AP_INITIATED:
		return "AP_INITIATED";
	case WIFI_REASON_INVALID_FT_ACTION_FRAME_COUNT:
		return "INVALID_FT_ACTION_FRAME_COUNT";
	case WIFI_REASON_INVALID_PMKID:
		return "INVALID_PMKID";
	case WIFI_REASON_INVALID_MDE:
		return "INVALID_MDE";
	case WIFI_REASON_INVALID_FTE:
		return "INVALID_FTE";
	case WIFI_REASON_TRANSMISSION_LINK_ESTABLISH_FAILED:
		return "TRANSMISSION_LINK_ESTABLISH_FAILED";
	case WIFI_REASON_ALTERATIVE_CHANNEL_OCCUPIED:
		return "ALTERATIVE_CHANNEL_OCCUPIED";
	case WIFI_REASON_BEACON_TIMEOUT:
		return "BEACON_TIMEOUT";
	case WIFI_REASON_NO_AP_FOUND:
		return "NO_AP_FOUND";
	case WIFI_REASON_AUTH_FAIL:
		return "AUTH_FAIL";
	case WIFI_REASON_ASSOC_FAIL:
		return "ASSOC_FAIL";
	case WIFI_REASON_HANDSHAKE_TIMEOUT:
		return "HANDSHAKE_TIMEOUT";
	case WIFI_REASON_CONNECTION_FAIL:
		return "CONNECTION_FAIL";
	case WIFI_REASON_AP_TSF_RESET:
		return "AP_TSF_RESET";
	case WIFI_REASON_ROAMING:
		return "ROAMING";
	case WIFI_REASON_ASSOC_COMEBACK_TIME_TOO_LONG:
		return "ASSOC_COMEBACK_TIME_TOO_LONG";
	case WIFI_REASON_SA_QUERY_TIMEOUT:
		return "SA_QUERY_TIMEOUT";
	default:
		return "UNKNOWN";
	}
}
